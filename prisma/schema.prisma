// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  profilePic    String?
  password      String?
  emailVerified DateTime?
  image         String?
  commits       Commit[]

  ownedRooms Room[] @relation("OwnedRooms")
  rooms      Room[] @relation("RoomMembers")

  invitesReceived RoomInvite[] @relation("InvitedUser")
  invitesSent     RoomInvite[] @relation("InvitedByUser")

  teams        Team[] @relation("UserTeams")
  createdTeams Team[] @relation("TeamCreators")

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  members     User[]   @relation("UserTeams")
  createdBy   User     @relation("TeamCreators", fields: [createdById], references: [id])
  createdById String
  rooms       Room[]
  createdAt   DateTime @default(now())
}

model Room {
  id        String       @id @default(cuid())
  slug      String       @unique
  name      String
  owner     User         @relation("OwnedRooms", fields: [ownerId], references: [id])
  ownerId   String
  members   User[]       @relation("RoomMembers")
  invites   RoomInvite[]
  content   String       @default("")
  team      Team?        @relation(fields: [teamId], references: [id])
  teamId    String?
  files     File[]
  createdAt DateTime     @default(now())
  commits   Commit[]
}

model RoomInvite {
  id     String @id @default(cuid())
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  invited   User   @relation("InvitedUser", fields: [invitedId], references: [id])
  invitedId String

  invitedBy   User   @relation("InvitedByUser", fields: [invitedById], references: [id])
  invitedById String

  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FileType {
  file
  folder
}

model File {
  id        String   @id @default(cuid())
  name      String
  content   String   @default("")
  type      FileType
  language  String?
  parentId  String?
  parent    File?    @relation("FileChildren", fields: [parentId], references: [id])
  children  File[]   @relation("FileChildren")
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commit {
  id        String       @id @default(cuid())
  message   String
  createdAt DateTime     @default(now())
  roomId    String
  room      Room         @relation(fields: [roomId], references: [id])
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  files     CommitFile[]
}

model CommitFile {
  id         String  @id @default(cuid())
  commitId   String
  fileId     String
  name       String
  language   String?
  content    String
  oldContent String?
  commit     Commit  @relation(fields: [commitId], references: [id])
}
